name: junit2otel-collector
desription: GitHub Action to process and send to a OpenTelemetry service a JUnit result file stored as artifact on a workflow run.
inputs:
  reportName:
    description: Name of the JUnit archived file. If there are multiple JUnit files it should be a `.zip` file.
    required: false
    default: junit-report.xml
  workflowRunId: 
    description: Id of the workflow run where the JUnit files are archived.
    required: false
    default: ${{ github.event.workflow_run.id }}
  owner:
    description: Owner of the repository we want ro process.
    required: false
    default: ${{ github.event.workflow_run.head_repository.owner.login }}
  repo:
    description: The repository we want ro process.
    required: false
    default: ${{ github.event.workflow_run.head_repository.name }}
runs:
  using: "composite"
  steps:
    - name: Download JUnit Artifact
      id: download-report
      uses: actions/github-script@v6.3.1
      with:
        script: |
          var owner = '${{ inputs.owner }}'
          var repo = '${{ inputs.repo }}'
          var workflowRunId = '${{ inputs.workflowRunId }}
          var reportName = '${{ inputs.reportName }}'

          console.log('::debug::Download artifacts - ' + 
            'owner: ' + owner + 
            'repo: ' + repo +
            'reportName' + reportName +
            'workflowRunId' + workflowRunId +
            'reportName' + reportName)

          var artifacts = await github.actions.listWorkflowRunArtifacts({
              owner: owner ,
              repo: repo,
              run_id: workflowRunId,
          });
          var matchArtifact = artifacts.data.artifacts.filter((artifact) => {
            return artifact.name == reportName
          })[0];

          console.log('::debug::Downloading : ' + matchArtifact)
          var download = await github.actions.downloadArtifact({
              owner: owner,
              repo: repo,
              artifact_id: matchArtifact.id,
              archive_format: 'zip',
          });

          var fs = require('fs');
          var os = require('os');
          var path = require('path');

          var tmpDir = os.tmpdir();
          mkdtemp(tmpDir + sep, (err, directory) => {
            if (err) throw err;
            console.log('::debug::Temp directory : ' + directory);
            var storedFile = directory + sep + 'junit-report.zip'
            console.log('::debug::Storing file ' + storedFile)
            fs.writeFileSync(storedFile, Buffer.from(download.data));
            console.log('::set-output name=tempdir::' + directory);
            console.log('::set-output name=report-file::' + storedFile);
          });
    - name: Uncompress files
      # bash is in all runners types
      shell: bash 
      # 7zip is in all runners types.
      run: | 
        7z x -o ${{ steps.download-report.outputs.report-file }}
    - name: Process JUnit files
      shell: bash
      run:
        for report in $(find ${{ steps.download-report.outputs.tempdir }} -name '*.xml');
        do
          echo "Procesing ${report}"
        done
